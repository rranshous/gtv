#!/usr/bin/env ruby

require 'rufus-scheduler'
require 'json'

puts "starting show runner"

CRON_DAYS_OF_WEEK = %w{sunday monday tuesday wednesday thursday friday saturday}

def read_show_details
  File.read('./show_details.jsonl').split("\n").map{ |l| JSON.load l }
rescue Errno::ENOENT
  []
end

def convert_to_cron day_of_week, time_24h
  hour, minute = time_24h.split(':')
  dow = CRON_DAYS_OF_WEEK.index day_of_week
  "#{minute} #{hour} * * #{dow}"
end

def turn_on_channel channel
  Kernel.spawn 'turn_on_channel', channel
end

def turn_off_channel pid
  puts "SIGINT :: #{pid}"
  Process.kill "SIGINT", pid
  #Thread.new do
  #  sleep(10)
  #  puts "9 :: #{pid}"
  #  Process.kill 9, pid
  #end
  Process.wait pid
  puts "done waiting on channel to die"
end

scheduler = Rufus::Scheduler.new

puts "reading schedule and registering shows"

read_show_details.each do |details|
  cron_string = convert_to_cron details['day_of_week'],
                                details['start_time']
  puts "scheduling: #{details}"
  puts "as #{cron_string}"
  scheduler.cron cron_string do

    puts "turning on channel #{details['channel']} for " +
         "#{details['length']}"
    running_channel = turn_on_channel details['channel']

    puts "scheduling turn off chanel"
    scheduler.in "#{details['length']}m" do

      puts "turning off channel #{details['channel']}, it has " +
           "been #{details['length']} minutes"
      turn_off_channel running_channel

      puts "channel turned off"
    end
  end
end

puts "waiting and watching"
scheduler.join
