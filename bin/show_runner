#!/usr/bin/env ruby

require 'tzinfo/data'
ENV['TZ'] = 'America/New_York'
require 'rufus-scheduler'
require 'json'

STDOUT.sync = true
STDERR.sync = true

rebuild_scheduler = false
Signal.trap("HUP") do
  rebuild_scheduler = true
end

puts "starting show runner"

CRON_DAYS_OF_WEEK = %w{sunday monday tuesday wednesday thursday friday saturday}

def read_show_details
  File.read('./show_details.jsonl').split("\n").map(&:chomp).map{ |l| JSON.load l }.compact
rescue Errno::ENOENT
  []
end

def convert_to_cron day_of_week, time_24h
  hour, minute = time_24h.split(':')
  dow = CRON_DAYS_OF_WEEK.index day_of_week
  "#{minute} #{hour} * * #{dow}"
end

def turn_on_channel channel
  Kernel.spawn 'turn_on_channel', channel
end

def turn_off_channel pid
  puts "SIGINT :: #{pid}"
  to_kill = [pid] + child_pids(pid)
  to_kill.each do |kill_pid|
    begin
      puts "killing proc: #{kill_pid}"
      Process.kill "SIGINT", kill_pid
    rescue Errno::ECHILD
    end
  end
  to_kill.each do |kill_pid|
    begin
      puts "waiting on #{kill_pid}"
      Process.wait kill_pid
    rescue Errno::ECHILD
    end
  end
  puts "done waiting on channel to die"
end

def child_pids pid
  `pgrep -P #{pid}`.split("\n").map(&:to_i)
end

def rebuild_scheduler!
  new_scheduler = Rufus::Scheduler.new
  old_scheduler = Thread.main[:scheduler]
  old_scheduler.shutdown
  Thread.main[:scheduler] = new_scheduler
  load_up_jobs new_scheduler
end

def load_up_jobs scheduler
  read_show_details.each do |details|
    cron_string = convert_to_cron details['day_of_week'],
                                  details['start_time']
    puts "scheduling: #{details}"
    puts "as #{cron_string}"
    scheduler.cron cron_string do

      puts "turning on channel #{details['channel']} for " +
           "#{details['length']}"
      running_channel = turn_on_channel details['channel']

      puts "scheduling turn off channel"
      scheduler.in "#{details['length']}m" do

        puts "turning off channel #{details['channel']}, it has " +
             "been #{details['length']} minutes"
        turn_off_channel running_channel

        puts "channel turned off"
      end
    end
  end
end

Thread.main[:scheduler] = Rufus::Scheduler.new

puts "reading schedule and registering shows"
load_up_jobs Thread.main[:scheduler]


puts "waiting and watching"
loop do
  if rebuild_scheduler
    puts "rebuilding scheduler"
    rebuild_scheduler!
    rebuild_scheduler = false
  elsif !Thread.main[:scheduler].up?
    puts "scheduler has stopped"
    break
  end
  sleep 1
end
puts "exited"
